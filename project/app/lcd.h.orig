#ifndef __LCD_H
#define __LCD_H
#include "at32f421.h" 
#include "stdint.h" 
#include "stdlib.h" 

#define DFT_SCAN_DIR  U2D_R2L  //默认的扫描方向
#define LCD_USE8BIT_MODEL   0  //8位16位切换，1：8位
                               //             0:16位

//扫描方向定义
#define L2R_U2D  0x00 //从左到右,从上到下（正向,0度）
#define L2R_D2U  0x80 //从左到右,从下到上
#define R2L_U2D  0x40 //从右到左,从上到下
#define R2L_D2U  0xc0 //从右到左,从下到上（旋转180度）

#define U2D_L2R  0x20 //从上到下,从左到右
#define U2D_R2L  0x60 //从上到下,从右到左（旋转90度）
#define D2U_L2R  0xa0 //从下到上,从左到右（旋转270度）
#define D2U_R2L  0xe0 //从下到上,从右到左

//LCD重要参数集
typedef struct  
{										    
	uint16_t width;			//LCD 宽度
	uint16_t height;			//LCD 高度
	uint16_t id;				  //LCD ID
}_lcd_dev; 	  

//LCD参数
extern _lcd_dev lcddev;	//管理LCD重要参数

//////////////////////////////////////////////////////////////////////////////////	 
//-----------------LCD端口定义---------------- 
#define	LCD_LED PAout(5) //LCD背光  PA5



#define	LCD_CS_SET  gpio_bits_set(GPIOA,GPIO_PINS_4)    //片选端口  PA0
#define	LCD_RS_SET	gpio_bits_set(GPIOA,GPIO_PINS_1)                    //数据/命令 PA1
#define	LCD_WR_SET	gpio_bits_set(GPIOA,GPIO_PINS_3)                    //写数据		PA2
#define	LCD_RD_SET	gpio_bits_set(GPIOA,GPIO_PINS_2)                    //读数据		PA3
#define	LCD_RST_SET	gpio_bits_set(GPIOA,GPIO_PINS_0)                    //复位			PA4
				

gpio_bits_reset
#define	LCD_CS_CLR  GPIOA->BRR=1<<0     //片选端口  PA0
#define	LCD_RS_CLR	GPIOA->BRR=1<<1     //数据/命令 PA1
#define	LCD_WR_CLR	GPIOA->BRR=1<<2     //写数据		PA2
#define	LCD_RD_CLR	GPIOA->BRR=1<<3     //读数据		PA3
#define	LCD_RST_CLR	GPIOA->BRR=1<<4     //复位			PA4

#define LCD_DATA_OUT() {GPIOB->CRH=0X33333333;GPIOB->CRL=0X33333333;}
#define LCD_DATA_IN()  {GPIOB->CRH=0X88888888;GPIOB->CRL=0X88888888;}

#define DATAOUT(x)  GPIOB->ODR=x;       //数据输出
#define DATAIN      GPIOB->IDR;         //数据输入

//画笔颜色
#define WHITE         	 0xFFFF
#define BLACK         	 0x0000	  
#define BLUE         	 0x001F  
#define BRED             0XF81F
#define GRED 			 0XFFE0
#define GBLUE			 0X07FF
#define RED           	 0xF800
#define MAGENTA       	 0xF81F
#define GREEN         	 0x07E0
#define CYAN          	 0x7FFF
#define YELLOW        	 0xFFE0
#define BROWN 			 0XBC40 //棕色
#define BRRED 			 0XFC07 //棕红色
#define GRAY  			 0X8430 //灰色
//GUI颜色

#define DARKBLUE      	 0X01CF	//深蓝色
#define LIGHTBLUE      	 0X7D7C	//浅蓝色  
#define GRAYBLUE       	 0X5458 //灰蓝色
//以上三色为PANEL的颜色 
 
#define LIGHTGREEN     	 0X841F //浅绿色
//#define LIGHTGRAY        0XEF5B //浅灰色(PANNEL)
#define LGRAY 			 0XC618 //浅灰色(PANNEL),窗体背景色

#define LGRAYBLUE        0XA651 //浅灰蓝色(中间层颜色)
#define LBBLUE           0X2B12 //浅棕蓝色(选择条目的反色)
	    				

void LCD_WR_REG(uint16_t reg);//写寄存器
void LCD_WR_data(uint16_t data);//写数据
void LCD_WR_DATA(uint16_t data);//写数据
uint16_t LCD_RD_DATA(void);//读点
uint16_t LCD_ReadReg(uint16_t LCD_Reg);//读寄存器
void LCD_SetCursor(uint16_t x,uint16_t y);//设置光标位置
void LCD_Address_Set(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2);//设置坐标函数
void LCD_DisplayOn(void);//开显示
void LCD_DisplayOff(void);//关显示
uint16_t LCD_ReadPoint(uint16_t x,uint16_t y);//读点函数
void LCD_Clear(uint16_t color);//清屏函数
	
void LCD_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color);//指定区域填充颜色
void LCD_DrawPoint(uint16_t x,uint16_t y,uint16_t color);//在指定位置画一个点
void LCD_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color);//在指定位置画一条线
void LCD_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color);//在指定位置画一个矩形
void Draw_Circle(uint16_t x0,uint16_t y0,uint8_t r,uint16_t color);//在指定位置画一个圆

void LCD_ShowChinese(uint16_t x,uint16_t y,uint8_t *s,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode);//显示汉字串
void LCD_ShowChinese12x12(uint16_t x,uint16_t y,uint8_t *s,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode);//显示单个12x12汉字
void LCD_ShowChinese16x16(uint16_t x,uint16_t y,uint8_t *s,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode);//显示单个16x16汉字
void LCD_ShowChinese24x24(uint16_t x,uint16_t y,uint8_t *s,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode);//显示单个24x24汉字
void LCD_ShowChinese32x32(uint16_t x,uint16_t y,uint8_t *s,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode);//显示单个32x32汉字

void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode);//显示一个字符
void LCD_ShowString(uint16_t x,uint16_t y,const uint8_t *p,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode);//显示字符串
uint32_t mypow(uint8_t m,uint8_t n);//求幂
void LCD_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey);//显示整数变量
void LCD_ShowFloatNum1(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey);//显示两位小数变量

void LCD_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[]);//显示图片

void Set_Dir(uint8_t dir);
void LCD_Init(void);													   	//初始化
				   						   																			 

#endif  
	 
	 



